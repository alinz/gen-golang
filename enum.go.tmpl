{{- define "enum" -}}

{{- $enum := .Type -}}
{{- $name := $enum.Name -}}
{{- $type := $enum.Type -}}
{{- $enums := $enum.Enums -}}

type {{$name}} {{$type}}

const (
{{- range $enums}}
	{{$name}}_{{.Name}} {{$name}} = {{.Value}}
{{- end}}
)

var {{$name}}_name = map[{{$type}}]string{
{{- range $enums}}
	{{.Value}}: "{{.Name}}",
{{- end}}
}

var {{$name}}_value = map[string]{{$type}}{
{{- range $enums}}
	"{{.Name}}": {{.Value}},
{{- end}}
}

func (x {{$name}}) String() string {
	return {{$name}}_name[{{$type}}(x)]
}

func (x {{$name}}) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString(`"`)
	buf.WriteString({{$name}}_name[{{$type}}(x)])
	buf.WriteString(`"`)
	return buf.Bytes(), nil
}

func (x *{{$name}}) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	*x = {{$name}}({{$name}}_value[j])
	return nil
}

{{- end -}}